/*-
 * #%L
 * LmdbJava
 * %%
 * Copyright (C) 2016 - 2019 The LmdbJava Open Source Project
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
// automatically generated by the FlatBuffers compiler, do not modify

package org.lmdbjava.routes;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")public final class LegInfo extends Table {
  public static LegInfo getRootAsLegInfo(ByteBuffer _bb) { return getRootAsLegInfo(_bb, new LegInfo()); }
  public static LegInfo getRootAsLegInfo(ByteBuffer _bb, LegInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public LegInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String sourceNode() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceNodeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer sourceNodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String shipMethodName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer shipMethodNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer shipMethodNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createLegInfo(FlatBufferBuilder builder,
      int sourceNodeOffset,
      int shipMethodNameOffset) {
    builder.startObject(2);
    LegInfo.addShipMethodName(builder, shipMethodNameOffset);
    LegInfo.addSourceNode(builder, sourceNodeOffset);
    return LegInfo.endLegInfo(builder);
  }

  public static void startLegInfo(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addSourceNode(FlatBufferBuilder builder, int sourceNodeOffset) { builder.addOffset(0, sourceNodeOffset, 0); }
  public static void addShipMethodName(FlatBufferBuilder builder, int shipMethodNameOffset) { builder.addOffset(1, shipMethodNameOffset, 0); }
  public static int endLegInfo(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

