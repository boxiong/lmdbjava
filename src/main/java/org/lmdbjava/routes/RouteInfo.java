/*-
 * #%L
 * LmdbJava
 * %%
 * Copyright (C) 2016 - 2019 The LmdbJava Open Source Project
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
// automatically generated by the FlatBuffers compiler, do not modify

package org.lmdbjava.routes;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")public final class RouteInfo extends Table {
  public static RouteInfo getRootAsRouteInfo(ByteBuffer _bb) { return getRootAsRouteInfo(_bb, new RouteInfo()); }
  public static RouteInfo getRootAsRouteInfo(ByteBuffer _bb, RouteInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public RouteInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int routeId() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateRouteId(int routeId) { int o = __offset(4); if (o != 0) { bb.putInt(o + bb_pos, routeId); return true; } else { return false; } }
  public String routeOrigin() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer routeOriginAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer routeOriginInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String routeAlias() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer routeAliasAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer routeAliasInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public byte pickupCapability() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 2; }
  public boolean mutatePickupCapability(byte pickupCapability) { int o = __offset(10); if (o != 0) { bb.put(o + bb_pos, pickupCapability); return true; } else { return false; } }
  public String validLastLegSortCodes(int j) { int o = __offset(12); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int validLastLegSortCodesLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public String legNodes(int j) { int o = __offset(14); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int legNodesLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public LegInfo legs(int j) { return legs(new LegInfo(), j); }
  public LegInfo legs(LegInfo obj, int j) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int legsLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }

  public static int createRouteInfo(FlatBufferBuilder builder,
      int routeId,
      int routeOriginOffset,
      int routeAliasOffset,
      byte pickupCapability,
      int validLastLegSortCodesOffset,
      int legNodesOffset,
      int legsOffset) {
    builder.startObject(7);
    RouteInfo.addLegs(builder, legsOffset);
    RouteInfo.addLegNodes(builder, legNodesOffset);
    RouteInfo.addValidLastLegSortCodes(builder, validLastLegSortCodesOffset);
    RouteInfo.addRouteAlias(builder, routeAliasOffset);
    RouteInfo.addRouteOrigin(builder, routeOriginOffset);
    RouteInfo.addRouteId(builder, routeId);
    RouteInfo.addPickupCapability(builder, pickupCapability);
    return RouteInfo.endRouteInfo(builder);
  }

  public static void startRouteInfo(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addRouteId(FlatBufferBuilder builder, int routeId) { builder.addInt(0, routeId, 0); }
  public static void addRouteOrigin(FlatBufferBuilder builder, int routeOriginOffset) { builder.addOffset(1, routeOriginOffset, 0); }
  public static void addRouteAlias(FlatBufferBuilder builder, int routeAliasOffset) { builder.addOffset(2, routeAliasOffset, 0); }
  public static void addPickupCapability(FlatBufferBuilder builder, byte pickupCapability) { builder.addByte(3, pickupCapability, 2); }
  public static void addValidLastLegSortCodes(FlatBufferBuilder builder, int validLastLegSortCodesOffset) { builder.addOffset(4, validLastLegSortCodesOffset, 0); }
  public static int createValidLastLegSortCodesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValidLastLegSortCodesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLegNodes(FlatBufferBuilder builder, int legNodesOffset) { builder.addOffset(5, legNodesOffset, 0); }
  public static int createLegNodesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLegNodesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLegs(FlatBufferBuilder builder, int legsOffset) { builder.addOffset(6, legsOffset, 0); }
  public static int createLegsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLegsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRouteInfo(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

