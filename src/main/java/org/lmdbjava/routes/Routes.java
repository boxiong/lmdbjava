/*-
 * #%L
 * LmdbJava
 * %%
 * Copyright (C) 2016 - 2019 The LmdbJava Open Source Project
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
// automatically generated by the FlatBuffers compiler, do not modify

package org.lmdbjava.routes;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")public final class Routes extends Table {
  public static Routes getRootAsRoutes(ByteBuffer _bb) { return getRootAsRoutes(_bb, new Routes()); }
  public static Routes getRootAsRoutes(ByteBuffer _bb, Routes obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Routes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public RouteInfo routes(int j) { return routes(new RouteInfo(), j); }
  public RouteInfo routes(RouteInfo obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int routesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createRoutes(FlatBufferBuilder builder,
      int routesOffset) {
    builder.startObject(1);
    Routes.addRoutes(builder, routesOffset);
    return Routes.endRoutes(builder);
  }

  public static void startRoutes(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addRoutes(FlatBufferBuilder builder, int routesOffset) { builder.addOffset(0, routesOffset, 0); }
  public static int createRoutesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRoutesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRoutes(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishRoutesBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedRoutesBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

